{"version":3,"file":"todo-list-store.js","sourceRoot":"","sources":["../../../../../src/components/react/todo-list-store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAE/D,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAG1C,MAAM,aAAa,mBAAG,WAAW,CAAC;IAChC,IAAI,EAAE,UAAU;IAChB,YAAY,EAAE;QACZ,KAAK,EAAE,EAAyC;KACjD;IACD,QAAQ,EAAE;QACR,OAAO,EAAE,CACP,KAAK,EACL,MAAkE,EAClE,EAAE;YACF,gBAAA,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;QACnC,CAAC;QACD,gBAAgB,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAClC,MAAM,IAAI,mBAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC;YACpE,IAAI,IAAI,EAAE,CAAC;gBACT,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;YACnC,CAAC;QACH,CAAC;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,aAAa,CAAC,OAAO,CAAC;AAEnE,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,KAA0C,EAC1C,EAAE,CACF,cAAc,CAAC;IACb,OAAO,EAAE;QACP,QAAQ,EAAE,aAAa,CAAC,OAAO;KAChC;IACD,cAAc,EAAE;QACd,QAAQ,EAAE;YACR,KAAK,EAAE,KAAK;SACb;KACF;CACF,CAAC,CAAC;AAUL,MAAM,CAAC,MAAM,mBAAmB,mBAAG,WAAW,CAAC,SAAS,EAAiB,CAAC;AAE1E,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAC3B,mBAAmB,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\nimport type { PayloadAction } from \"@reduxjs/toolkit/react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport type { TheTodoList } from \"../../cloudstate/todo-list\";\r\n\r\nconst todoListSlice = createSlice({\r\n  name: \"todoList\",\r\n  initialState: {\r\n    items: [] as ReturnType<TheTodoList[\"getItems\"]>,\r\n  },\r\n  reducers: {\r\n    addItem: (\r\n      state,\r\n      action: PayloadAction<ReturnType<TheTodoList[\"getItems\"]>[number]>\r\n    ) => {\r\n      state.items.push(action.payload);\r\n    },\r\n    toggleCompletion: (state, action) => {\r\n      const item = state.items.find((item) => item.id === action.payload);\r\n      if (item) {\r\n        item.completed = !item.completed;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addItem, toggleCompletion } = todoListSlice.actions;\r\n\r\nexport const createTodoListStore = (\r\n  items: ReturnType<TheTodoList[\"getItems\"]>\r\n) =>\r\n  configureStore({\r\n    reducer: {\r\n      todoList: todoListSlice.reducer,\r\n    },\r\n    preloadedState: {\r\n      todoList: {\r\n        items: items,\r\n      },\r\n    },\r\n  });\r\n\r\nexport type TodoListState = ReturnType<\r\n  ReturnType<typeof createTodoListStore>[\"getState\"]\r\n>;\r\n\r\nexport type TodoListDispatch = ReturnType<\r\n  typeof createTodoListStore\r\n>[\"dispatch\"];\r\n\r\nexport const useTodoListSelector = useSelector.withTypes<TodoListState>();\r\n\r\nexport const useItems = () =>\r\n  useTodoListSelector((state) => state.todoList.items);\r\n"]}